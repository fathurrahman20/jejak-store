// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  SUPERADMIN
  CUSTOMER
}

model User {
  id       String @id @default(uuid())
  email    String @unique @db.VarChar(255)
  name     String @db.VarChar(255)
  password String @db.VarChar(255)
  role     Role   @default(CUSTOMER)

  Order Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Brand {
  id       String @id @default(uuid())
  name     String @db.VarChar(255)
  slug     String @unique @db.VarChar(255)
  logo_url String @db.VarChar(255)

  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brands")
}

model Category {
  id   String @id @default(uuid())
  name String @db.VarChar(255)
  slug String @unique @db.VarChar(255)

  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Location {
  id   String @id @default(uuid())
  name String @db.VarChar(255)
  slug String @unique @db.VarChar(255)

  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

enum ProductStock {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}

model Product {
  id String @id @default(uuid())

  brandId String @map("brand_id") @db.VarChar(255)
  brand   Brand  @relation(fields: [brandId], references: [id])

  categoryId String   @map("category_id") @db.VarChar(255)
  category   Category @relation(fields: [categoryId], references: [id])

  locationId String   @map("location_id") @db.VarChar(255)
  location   Location @relation(fields: [locationId], references: [id])

  name        String       @db.VarChar(255)
  slug        String       @unique @db.VarChar(255)
  description String       @db.VarChar(255)
  price       BigInt       @db.BigInt
  stock       ProductStock
  imageUrl    String       @map("image_url") @db.VarChar(255)

  OrderProduct OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

enum StatusOrder {
  PENDING
  SUCCESS
  FAILED
}

model Order {
  id String @id @default(uuid())

  userId String @map("user_id") @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])

  code   String      @unique @db.Text
  status StatusOrder
  total  BigInt      @db.BigInt

  detail  OrderDetail?
  product OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderDetail {
  id String @id @default(uuid())

  orderId String @unique @map("order_id") @db.VarChar(255)
  order   Order  @relation(fields: [orderId], references: [id])

  name       String  @db.VarChar(255)
  phone      String  @db.VarChar(255)
  address    String  @db.VarChar(255)
  city       String  @db.VarChar(255)
  postalCode String  @map("postal_code") @db.VarChar(255)
  notes      String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_details")
}

model OrderProduct {
  id String @id @default(uuid())

  orderId String @map("order_id") @db.VarChar(255)
  order   Order  @relation(fields: [orderId], references: [id])

  productId String  @map("product_id") @db.VarChar(255)
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  subtotal BigInt @db.BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}
